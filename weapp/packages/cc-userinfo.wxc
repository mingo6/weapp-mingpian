<template>
    <view class="project-item">
        <view class='dialog-container' hidden="{{!showDialog}}">
            <view class='dialog-mask'></view>
            <view class='dialog-info'>
                <view class='dialog-title'>{{ title }}</view>
                <text class='dialog-content'>{{ content }}</text>
                <view class='dialog-footer'>
                    <button class='dialog-btn' open-type="getUserInfo" bindgetuserinfo='bindGetUserInfo' catchtap='confirmEvent'>{{ confirmText }}</button>
                </view>
            </view>
        </view>
    </view>
</template>
<script>
import regeneratorRuntime from 'regenerator-runtime';
import authApi from "../static/apis/auth";
import system from "../static/utils/system";
export default {
    options: {
        multipleSlots: true // 在组件定义时的选项中启用多slot支持
    },
    /**
     * 组件的属性列表
     */
    properties: {
        // 弹窗标题
        title: {
            type: String,
            value: '标题' // 默认值
        },
        // 弹窗内容
        content: {
            type: String,
            value: '弹窗内容'
        },

        // 弹窗确认按钮文字
        confirmText: {
            type: String,
            value: '确定'
        },
        showDialog: {
            type: Boolean,
            value: false,
            observer: function(newVal, oldVal, changedPath) {
                // console.log(newVal, oldVal, changedPath);
            }
        },
        force: {
            type: Boolean,
            value: false
        },
    },

    /**
     * 组件内私有数据
     */
    data: {},

    /**
     * 组件的公有方法列表
     */
    methods: {
        //隐藏弹框
        hideDialog() {
            this.setData({
                showDialog: !this.data.showDialog
            })
        },
        //展示弹框
        showDialog() {
            this.setData({
                showDialog: !this.data.showDialog
            })
        },
        /**
         * triggerEvent 组件之间通信
         */
        confirmEvent() {
            this.triggerEvent("confirmEvent");
        },

        async bindGetUserInfo(res) {
            console.log(res);
            if (res.detail.errMsg === "getUserInfo:ok") {
                var userInfo = res.detail.userInfo;
                await authApi.saveUerInfo(userInfo);
                this.setData({
                    showDialog: false
                });
                this.triggerEvent("bindGetUserInfo", true);
            } else {
                if (this.data.force == false) {
                    this.setData({
                        showDialog: false
                    });
                }
                this.triggerEvent("bindGetUserInfo", false);
            }
            // console.log(res);
        }

    },
    // lifetimes: {
    //     // 生命周期函数，可以为函数，或一个在methods段中定义的方法名
    //     created: function() {
    //         console.log('-------------------created');
    //     },
    //     created: function() {
    //         console.log('-------------------created');
    //     },
    //     ready: function() {
    //         console.log('-------------------ready');
    //     },
    //     moved: function() {
    //         console.log('-------------------moved');
    //     },
    //     detached: function() {
    //         console.log('-------------------detached');
    //     },
    // },
    ready() {
        // console.log('userinfo 组件 ready');
        var userinfo = system.syncstorage('userInfo');
        // console.log('userinfo:', userinfo);
        if (userinfo === '') {
            this.setData({showDialog: true});
            // this.triggerEvent("bindGetUserInfo", false);
        } else {
            this.triggerEvent("bindGetUserInfo", true);
        }
    }
};

</script>
<style lang="less">
.dialog-mask {
    position: fixed;
    z-index: 1000;
    top: 0;
    right: 0;
    left: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.3);
}

.dialog-info {
    position: fixed;
    z-index: 5000;
    width: 80%;
    max-width: 600rpx;
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
    background-color: #FFFFFF;
    text-align: center;
    border-radius: 3px;
    overflow: hidden;
}

.dialog-title {
    font-size: 36rpx;
    padding: 30rpx 30rpx 10rpx;
}

.dialog-content {
    padding: 10rpx 30rpx 20rpx;
    min-height: 80rpx;
    font-size: 32rpx;
    line-height: 1.3;
    word-wrap: break-word;
    word-break: break-all;
    text-align: center;
    display: block;
    color: #999999;
}

.dialog-footer {
    display: flex;
    align-items: center;
    position: relative;
    line-height: 90rpx;
    font-size: 34rpx;
}

.dialog-btn {
    display: block;
    -webkit-flex: 1;
    flex: 1;
    position: relative;
    color: #3CC51F;
    font-size: 28rpx;
}

</style>
